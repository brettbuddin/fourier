package window

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestWindows(t *testing.T) {
	for _, v := range []struct {
		wf     Func
		expect []float64
	}{
		{
			wf: Lanczos,
			expect: []float64{
				3.89817183251937e-17,
				0.23387232094715982,
				0.5045511524271047,
				0.756826728640657,
				0.935489283788639,
				1,
				0.935489283788639,
				0.7568267286406571,
				0.5045511524271046,
				0.23387232094715982,
				3.89817183251937e-17,
			},
		},
		{
			wf: Hann,
			expect: []float64{
				0,
				0.09549150281252633,
				0.3454915028125263,
				0.6545084971874737,
				0.9045084971874737,
				1,
				0.9045084971874737,
				0.6545084971874737,
				0.3454915028125264,
				0.09549150281252633,
				0,
			},
		},
		{
			wf: Hamming,
			expect: []float64{
				0.0767199999999999,
				0.16488539471674923,
				0.3957053947167492,
				0.6810146052832506,
				0.9118346052832507,
				1,
				0.9118346052832507,
				0.6810146052832508,
				0.39570539471674926,
				0.16488539471674923,
				0.0767199999999999,
			},
		},
		{
			wf: Blackman,
			expect: []float64{
				-1.3877787807814457e-17,
				0.04021286236252211,
				0.20077014326253045,
				0.5097871376374778,
				0.8492298567374694,
				1,
				0.8492298567374694,
				0.509787137637478,
				0.20077014326253056,
				0.04021286236252208,
				-1.3877787807814457e-17,
			},
		},
		{
			wf: Bartlett,
			expect: []float64{
				0,
				0.19999999999999996,
				0.4,
				0.6,
				0.8,
				1,
				0.8,
				0.6,
				0.4,
				0.19999999999999996,
				0,
			},
		},
	} {
		n := len(v.expect)
		out := make([]float64, n)
		for i := 0; i < n; i++ {
			out[i] = v.wf(float64(i), n-1)
		}

		for i := range out {
			if v.expect[i] == 0 {
				continue
			}
			require.InEpsilon(t, v.expect[i], out[i], 1e-9)
		}
	}
}
